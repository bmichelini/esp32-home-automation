// Inclus√£o das bibliotecas b√°sicas para conex√£o Wi-Fi, sensor de temperatura/umidade e controle de servo motor.
#include <WiFi.h>        // Conecta o ESP32 √† rede Wi-Fi
#include <DHT.h>         // Biblioteca para ler sensores DHT (temperatura/umidade)
#include <ESP32Servo.h>  // Biblioteca para controlar servo motores
#include <WiFiManager.h> // Biblioteca que gerencia conex√£o Wi-Fi com portal de configura√ß√£o
#include <Preferences.h>

// Inclus√£o dos arquivos de cabe√ßalho personalizados do projeto
#include "config.h"    // Constantes, defini√ß√µes de pinos, arrays de luzes, etc.
#include "sensores.h"  // Fun√ß√µes que lidam com sensores
#include "atuadores.h" // Fun√ß√µes que controlam buzzer, luzes, servo motor, etc.
#include "interface.h" // Interface HTML e tratamento de requisi√ß√µes HTTP

// Cria√ß√£o de um servidor web na porta 80 (padr√£o HTTP)
WiFiServer server(80);

// Objeto global para armazenar configura√ß√µes persistentes
Preferences prefs;

void setup()
{
  Serial.begin(115200); // Inicia a comunica√ß√£o serial (monitor serial do Arduino)

  // ========== Configura√ß√£o via WiFiManager ==========
  WiFiManager wm;

  // Adiciona estilo visual ao portal de configura√ß√£o
  wm.setCustomHeadElement("<style>body{font-family:Arial;text-align:center;}h2{color:#2c3e50;}</style>");

  // Cria um campo extra no portal de configura√ß√£o (ID, label, valor padr√£o, tamanho m√°ximo)
  WiFiManagerParameter custom_local("local", "Nome do local", "", 40);
  wm.addParameter(&custom_local); // Adiciona o campo ao portal

  // Tenta conectar-se com credenciais salvas anteriormente
  // Se falhar, cria um Access Point chamado "ESP32-Setup"
  bool conectado = wm.autoConnect("ESP32-Setup");

  if (!conectado)
  {
    Serial.println("‚ùå Falha na conex√£o ou tempo esgotado. Reiniciando...");
    delay(3000);
    ESP.restart(); // Reinicia o ESP32 para tentar novamente
  }

  // Conectado com sucesso
  Serial.println("‚úÖ Conectado √† rede Wi-Fi!");
  Serial.print("Endere√ßo IP: ");
  Serial.println(WiFi.localIP());

  // L√™ o valor inserido no campo personalizado (nome do local)
  String nomeLocal = custom_local.getValue();
  Serial.print("Nome do local configurado: ");
  Serial.println(nomeLocal);

  // Salva o nome do local na mem√≥ria flash para uso futuro
  prefs.begin("config", false);        // Inicia namespace "config"
  prefs.putString("local", nomeLocal); // Grava a string "nomeLocal"
  prefs.end();                         // Encerra o uso da mem√≥ria

  // ========== INICIALIZA√á√ÉO DOS SENSORES E ATUADORES ==========

  pinMode(GasD, INPUT);        // Define pino do sensor de g√°s como entrada
  pinMode(Buzzer, OUTPUT);     // Define pino do buzzer como sa√≠da
  pinMode(luzFachada, OUTPUT); // Define pino da luz da fachada como sa√≠da
  pinMode(PIR_SENSOR, INPUT);  // Define pino do sensor de presen√ßa como entrada

  // Configura os pinos das luzes e garante que todas iniciem desligadas
  for (int i = 0; i < numLuzes; i++)
  {
    pinMode(pinosLuzes[i], OUTPUT);
    digitalWrite(pinosLuzes[i], LOW);
  }

  dht.begin(); // Inicia o sensor de temperatura/umidade DHT

  // Prepara o motor da garagem para iniciar fechado
  motorgaragem.attach(15); // Liga o motor ao pino 15
  motorgaragem.write(180); // 180 graus = posi√ß√£o de fechado
  motorgaragem.detach();   // Desconecta para evitar ru√≠do ou sobreaquecimento

  server.begin(); // Inicia o servidor ap√≥s conectar √† rede

  // Indica√ß√£o de que o sistema foi iniciado com sucesso
  Serial.println("üè† Sistema de automa√ß√£o residencial iniciado com sucesso.");
}

void loop()
{
  // unsigned long inicio = millis();
  // Executa leitura de sensores a cada intervalo
  if (millis() - ultimaLeitura >= intervalo)
  {
    verificarGas();           // L√™ sensor de g√°s e aciona o alarme se necess√°rio
    verificarPresenca();      // L√™ sensor PIR e aciona buzzer se detectar movimento
    atualizarLuzFachada();    // Liga/desliga a luz da fachada com base na claridade
    ultimaLeitura = millis(); // Atualiza o tempo da √∫ltima leitura
  }

  WiFiClient client = server.available(); // Verifica se h√° cliente (navegador) conectado
  if (client)
  {
    // Se houver cliente, processa a requisi√ß√£o HTTP
    //Serial.println("üì° Cliente conectado!");
    String request = lerRequisicao(client); // L√™ a solicita√ß√£o HTTP
    processarRequisicao(client, request);   // Responde ao cliente com HTML e a√ß√µes
    // delay(1);
    // client.stop();
  }

  // Serial.print("Resposta enviada em: ");
  // Serial.println(millis() - inicio);
  // delay(100);  // Pequeno atraso para estabilidade (pode ser removido em vers√µes ass√≠ncronas)
}